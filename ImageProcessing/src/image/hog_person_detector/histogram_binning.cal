package image.hog_person_detector;

import image.hog_person_detector.constants.*;

actor histogram_binning() uint(size=8) angle, uint(size=8) intensity ==> uint(size=16) Histogram :
	uint(size=16) histogram[HIST_LENGTH];
	uint(size=16) i := 0;
	uint(size=8) read_count := 0;
	uint(size=8) out_count := 0;
	int(size=16) slot := 0;
	int(size=16) left := 0;
	uint(size=8) low := 0;
	uint(size=8) high := 0;
	int(size=16) astore := 0;
	int(size=16) hislot := 0;


	initArray: action ==>
	do
		read_count := 0;
		out_count := 0;
		i := 0;
		while i < HIST_LENGTH do
			histogram[i] := 0;
			i := i + 1;
		end
		i:= 0;
	end

	bin: action angle:[angle], intensity:[intense] ==>
	guard
		read_count < 64
	do
		i := intense;
		astore := angle - 10;
		slot := astore / 20;
		left := astore mod 20;
		hislot := slot + 1;
		if slot < 0 then
			slot := HIST_LENGTH - 1;
		end
		if hislot >= HIST_LENGTH then
			hislot := 0;
		end

		if left = 0 then
			histogram[slot] := histogram[slot] + i;
		else
			low := ((20 - left) * i) / 20;
			high := (left * i) /20;

			histogram[slot] := histogram[slot] + low;
			histogram[hislot] := histogram[hislot] + high;
		end
		read_count := read_count + 1;
	end

	outputArray: action ==> Histogram:[histogram[out_count-1]]
	guard
		out_count < 9 and read_count >= 64
	do
		out_count := out_count + 1;

	end

	reset: action ==>
	guard
		out_count = 9
	end

	schedule fsm init:
		init (initArray) --> read;
		read (bin) --> read;
		read (outputArray) --> read;
		read (reset) --> init;
	end
end
