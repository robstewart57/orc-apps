

/*
* Copyright (c) 2017, Heriot-Watt University, Edinburgh
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are met:
*
*   * Redistributions of source code must retain the above copyright notice,
*     this list of conditions and the following disclaimer.
*   * Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*   * Neither the name of the IRISA nor the names of its
*     contributors may be used to endorse or promote products derived from this
*     software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
* AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
* ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
* LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
* CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
* SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
* INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
* STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
* WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
* SUCH DAMAGE.
*/

/*
* Author: Mark Young & Teymoor Rasheed Ali my120@hw.ac.uk tr78@hw.ac.uk
* Date: 27.02.2017
*/
package image.hog_person_detector;

actor histogram_normalisation () uint(size=16) Gin ==> uint(size=8) Gout :

/* Constants */
	uint(size=8) histogram_bins := 36;

	/* Variables */
	uint(size=8) histogram_count := 0;

	uint(size=16) total_histogram_count := 0;

	uint(size=16) in_histogram [ histogram_bins ];

	uint(size=32) max := 0;

	uint(size=32) min := 65535;

	uint(size=16) out; //read in one block at a time
	read: action Gin:[ x ] ==>
	guard
		histogram_count < histogram_bins
	do
		in_histogram[histogram_count] := x;
		if x > max then
			max := x;
		end
		if x < min then
			min := x;
		end
		histogram_count := histogram_count + 1;
	end

	transition: action ==>
	guard
		histogram_count = histogram_bins
	do
		histogram_count := 0;
	end 
	
	//normalising all values in the block between 0 and 255 depending on the minimum and maximum values within the whole block
	write: action ==> Gout:[ out ]
	guard
		histogram_count < histogram_bins
	do //Normalise between 0 and 1
		if (min - max) = 0 then
			out := 255;
		else
			out := ((in_histogram[histogram_count] - min) * 255) / ((max - min));
		end
		histogram_count := histogram_count + 1;
	end

	reset: action ==>
	guard
		histogram_count >= histogram_bins
	do
		histogram_count := 0;
		max := 0;
		min := 65535;
	end

	schedule fsm read :
		read ( read ) --> read;
		read ( transition ) --> write;
		write ( write ) --> write;
		write ( reset ) --> read;
		end

end
