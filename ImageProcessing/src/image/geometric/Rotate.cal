

/*
 * Copyright (c) 2017, Heriot-Watt University, Edinburgh
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the IRISA nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 * Author: Teymoor Rasheed Ali tr78@hw.ac.uk
 * Date: 27.02.2017
 */
package image.geometric;

actor Rotate () uint(size=8) Gin ==> uint(size=8) Gout :

/* Constants */
	uint(size=16) imageHeight = 512;

	uint(size=16) imageWidth = 512;

	uint(size=32) bufferSize = imageWidth * imageHeight;

	uint(size=8) angle = 90; //90,180,270


	/* Variables */
	uint(size=32) head := 0;

	uint(size=8) buffer [ bufferSize ];

	uint(size=16) y := 0;

	uint(size=16) x := 0;

	uint(size=8) out;

	read: action Gin:[ x ] ==>
	guard
		head < bufferSize
	do
		buffer[head] := x;
		head := head + 1;
	end

	transition: action ==>
	guard
		head = bufferSize
	do
		head := 0;
		x := 0;
		y := 0;
	end

	write: action ==> Gout:[ out ]
	guard
		head < bufferSize
	do
		if angle <= 90 then
			out := buffer[imageHeight * imageWidth - (y + 1) * imageWidth + x];
			y := y + 1;
			if y >= imageWidth then
				y := 0;
				x := x + 1;
			end
		else
			if angle <= 180 then
				out := buffer[imageHeight * imageWidth - y * imageWidth - x];
				x := x + 1;
				if x >= imageWidth then
					x := 0;
					y := y + 1;
				end
			else
				out := buffer[imageWidth * (y + 1) - x];
				y := y + 1;
				if y >= imageWidth then
					y := 0;
					x := x + 1;
				end
			end
		end
		head := head + 1;
	end

	reset: action ==>
	guard
		head >= bufferSize
	do
		head := 0;
	end

	schedule fsm read :
		read ( read ) --> read;
		read ( transition ) --> write;
		write ( write ) --> write;
		write ( reset ) --> read;
		end

end