/*
 * Copyright (c) 2011, EPFL
 * Copyright (c) 2016, Heriot-Watt University
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the EPFL nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
 
// Author: Endri Bezati <endri.bezati@epfl.ch>
//       , Rob Stewart <R.Stewart@hw.ac.uk>

package std.stdio;

/**
 * Standard I/O writer actor.
 */
@xronos_no_generation
actor Writer()
 	uint(size=8) Byte,
 	bool pEOF
 		==> 
 			:

	/**
	 * Initializing the file to be written
	 */
	@native procedure Writer_init() end

	/**
	 * Write a byte to a file
	 */
	@native procedure Writer_write(uint(size=8) byte) end
	
	/**
	 * Close the file
	 */
	@native procedure Writer_close() end

	initialize ==>
	do		
		Writer_init();					
	end
	
	bool peof := false;
	
	GetEOF: action pEOF:[p] ==>
	do  	    
		peof := p;
	end
	
	Write: action Byte:[b] ==>
	guard
		not peof
	do
		Writer_write(b);		
	end
	
	Close: action ==>
	guard
		peof
	do  Writer_close();
	end
	
	schedule fsm s0:
		s0		(GetEOF)		--> s1;
		s1		(Write)			--> s0;
		s1		(Close)			--> s0;
	end

end