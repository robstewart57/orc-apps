package std.image;

actor DisplayRGB() uint(size=8) R, uint(size=8) G, uint(size=8) B ==> int(size=32) xPos, int(size=32) yPos :

  uint(size=32) IM_WIDTH = 640;
  uint(size=32) IM_HEIGHT = 480;
  int(size=32) mousePositions[2];

@native procedure initDisplayRGB(uint(size=32) width, uint(size=32) height)
end

@native procedure displayRGB(uint(size=32) width, uint(size=32) height, uint(size=8) rArr[IM_WIDTH*IM_HEIGHT], uint(size=8) gArr[IM_WIDTH*IM_HEIGHT], uint(size=8) bArr[IM_WIDTH*IM_HEIGHT], int(size=32) mousePositions[2])
end

initialize ==>
do initDisplayRGB(IM_WIDTH, IM_HEIGHT); end

display: action R:[rArray] repeat IM_WIDTH*IM_HEIGHT,
                G:[gArray] repeat IM_WIDTH*IM_HEIGHT,
                B:[bArray] repeat IM_WIDTH*IM_HEIGHT ==>
do
  displayRGB(IM_WIDTH,IM_HEIGHT,rArray,gArray,bArray,mousePositions);
end

emitXY: action ==> xPos:[mousePositions[0]], yPos:[mousePositions[1]]
guard (mousePositions[0] != -1)
end

reset: action ==> end

schedule fsm s0 :
  s0 (display) --> s1;
  s1 (emitXY)  --> s0;
  s1 (reset)   --> s0;
end

priority
  emitXY > reset;
end

end