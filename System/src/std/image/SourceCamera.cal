/*
 * Copyright (c) 2014, Heriot-Watt University, Edinburgh
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the IRISA nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 * Author: Rob Stewart, R.Stewart@hw.ac.uk
 * Date: 27.08.2014
 * Description:
 *   This actor uses two native procedures, that are themselves written
 *   in C and use the OpenCV library to read RGB frames from the default
 *   camera source. The native procedures are in
 *     eclipse/plugins/net.sf.orcc.backends/runtime/C/libs/orcc-native/src/source_camera.c
 * 
 *   The dimensions of the streaming source must be known when
 *   `void source_camera_init(int width, int height)` is called using
 *   source_camera_init(..) in RVC-CAL. These are defined in
 *   System:/sr/std/stdio/SourceCamera.cal . Each time 
 *   `void readCameraFrame(uchar *rArr, uchar *gArr, uchar *bArr)` is called
 *   using `readCameraFrame(..)` in RVC-CAL, the native function writes
 *   RGB values for a complete frames into the rArr, gArr and bArr 1D arrays.
 */

package std.image;

import std.stdio.SourceCamera.*;

actor SourceCamera () ==> uint(size=8) R, uint(size=8) G, uint(size=8) B:

	uint(size=8) rArr[IM_WIDTH*IM_HEIGHT];
	uint(size=8) gArr[IM_WIDTH*IM_HEIGHT];
	uint(size=8) bArr[IM_WIDTH*IM_HEIGHT];
	
	initialize ==>
	do
		source_camera_init(IM_WIDTH, IM_HEIGHT);
	end

	readFrame: action ==>
	do
	  readCameraFrame(rArr,gArr,bArr);
	end
    
	int pixelCount := 0;
	sendRGB: action ==> R:[rArr[pixelCount]], G:[gArr[pixelCount]], B:[bArr[pixelCount]] 
	do
		pixelCount := pixelCount + 1;
	end

	doneSend: action ==>
	guard pixelCount = IM_WIDTH * IM_HEIGHT
	do
		pixelCount := 0;
	end

	schedule fsm ReadFrame:
		ReadFrame (readFrame) --> SendRGB;
		SendRGB (doneSend) --> ReadFrame;
		SendRGB (sendRGB) --> SendRGB;
    end
    
    priority
    	doneSend > sendRGB;
    end
    
end