package std.image;

actor DisplayGray() uint(size=8) Gray ==> int(size=32) xPos, int(size=32) yPos :

  uint(size=32) IM_WIDTH = 640;
  uint(size=32) IM_HEIGHT = 480;
  int(size=32) mousePositions[2];

@native procedure initDisplayGray(uint(size=32) width, uint(size=32) height)
end

@native procedure getXY(uint(size=32) x, uint(size=32) y)
end

@native procedure displayGray(uint(size=32) width, uint(size=32) height, uint(size=8) grayArr[IM_WIDTH*IM_HEIGHT], int(size=32) mousePositions[2])
end

initialize ==>
do initDisplayGray(IM_WIDTH,IM_HEIGHT);
   mousePositions[0] := -1;
   mousePositions[1] := -1;
end

display: action Gray:[grayArray] repeat IM_WIDTH*IM_HEIGHT ==>
do
  displayGray(IM_WIDTH,IM_HEIGHT,grayArray, mousePositions);
end

emitXY: action ==> xPos:[mousePositions[0]], yPos:[mousePositions[1]]
guard (mousePositions[0] != -1)
end

reset: action ==> end

schedule fsm s0 :
  s0 (display) --> s1;
  s1 (emitXY)  --> s0;
  s1 (reset)   --> s0;
end

priority
  emitXY > reset;
end

end